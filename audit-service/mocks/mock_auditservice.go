// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "audit-service/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuditService is an autogenerated mock type for the AuditService type
type MockAuditService struct {
	mock.Mock
}

type MockAuditService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditService) EXPECT() *MockAuditService_Expecter {
	return &MockAuditService_Expecter{mock: &_m.Mock}
}

// GetAuditLogs provides a mock function with given fields: ctx, sessionID, userID, isShareToken, pagination
func (_m *MockAuditService) GetAuditLogs(ctx context.Context, sessionID string, userID string, isShareToken bool, pagination domain.PaginationParams) (*domain.AuditResponse, error) {
	ret := _m.Called(ctx, sessionID, userID, isShareToken, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetAuditLogs")
	}

	var r0 *domain.AuditResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, domain.PaginationParams) (*domain.AuditResponse, error)); ok {
		return rf(ctx, sessionID, userID, isShareToken, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, domain.PaginationParams) *domain.AuditResponse); ok {
		r0 = rf(ctx, sessionID, userID, isShareToken, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AuditResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, domain.PaginationParams) error); ok {
		r1 = rf(ctx, sessionID, userID, isShareToken, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuditService_GetAuditLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditLogs'
type MockAuditService_GetAuditLogs_Call struct {
	*mock.Call
}

// GetAuditLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
//   - userID string
//   - isShareToken bool
//   - pagination domain.PaginationParams
func (_e *MockAuditService_Expecter) GetAuditLogs(ctx interface{}, sessionID interface{}, userID interface{}, isShareToken interface{}, pagination interface{}) *MockAuditService_GetAuditLogs_Call {
	return &MockAuditService_GetAuditLogs_Call{Call: _e.mock.On("GetAuditLogs", ctx, sessionID, userID, isShareToken, pagination)}
}

func (_c *MockAuditService_GetAuditLogs_Call) Run(run func(ctx context.Context, sessionID string, userID string, isShareToken bool, pagination domain.PaginationParams)) *MockAuditService_GetAuditLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool), args[4].(domain.PaginationParams))
	})
	return _c
}

func (_c *MockAuditService_GetAuditLogs_Call) Return(_a0 *domain.AuditResponse, _a1 error) *MockAuditService_GetAuditLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuditService_GetAuditLogs_Call) RunAndReturn(run func(context.Context, string, string, bool, domain.PaginationParams) (*domain.AuditResponse, error)) *MockAuditService_GetAuditLogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuditService creates a new instance of MockAuditService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditService {
	mock := &MockAuditService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
