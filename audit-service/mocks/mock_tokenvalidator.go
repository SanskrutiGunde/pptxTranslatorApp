// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	jwt "audit-service/pkg/jwt"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTokenValidator is an autogenerated mock type for the TokenValidator type
type MockTokenValidator struct {
	mock.Mock
}

type MockTokenValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenValidator) EXPECT() *MockTokenValidator_Expecter {
	return &MockTokenValidator_Expecter{mock: &_m.Mock}
}

// ExtractUserID provides a mock function with given fields: ctx, tokenString
func (_m *MockTokenValidator) ExtractUserID(ctx context.Context, tokenString string) (string, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ExtractUserID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, tokenString)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenValidator_ExtractUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtractUserID'
type MockTokenValidator_ExtractUserID_Call struct {
	*mock.Call
}

// ExtractUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
func (_e *MockTokenValidator_Expecter) ExtractUserID(ctx interface{}, tokenString interface{}) *MockTokenValidator_ExtractUserID_Call {
	return &MockTokenValidator_ExtractUserID_Call{Call: _e.mock.On("ExtractUserID", ctx, tokenString)}
}

func (_c *MockTokenValidator_ExtractUserID_Call) Run(run func(ctx context.Context, tokenString string)) *MockTokenValidator_ExtractUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenValidator_ExtractUserID_Call) Return(_a0 string, _a1 error) *MockTokenValidator_ExtractUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenValidator_ExtractUserID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockTokenValidator_ExtractUserID_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: ctx, tokenString
func (_m *MockTokenValidator) ValidateToken(ctx context.Context, tokenString string) (*jwt.Claims, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *jwt.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*jwt.Claims, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *jwt.Claims); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenValidator_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockTokenValidator_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
func (_e *MockTokenValidator_Expecter) ValidateToken(ctx interface{}, tokenString interface{}) *MockTokenValidator_ValidateToken_Call {
	return &MockTokenValidator_ValidateToken_Call{Call: _e.mock.On("ValidateToken", ctx, tokenString)}
}

func (_c *MockTokenValidator_ValidateToken_Call) Run(run func(ctx context.Context, tokenString string)) *MockTokenValidator_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenValidator_ValidateToken_Call) Return(_a0 *jwt.Claims, _a1 error) *MockTokenValidator_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenValidator_ValidateToken_Call) RunAndReturn(run func(context.Context, string) (*jwt.Claims, error)) *MockTokenValidator_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenValidator creates a new instance of MockTokenValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenValidator {
	mock := &MockTokenValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
