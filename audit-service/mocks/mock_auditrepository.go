// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "audit-service/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	repository "audit-service/internal/repository"
)

// MockAuditRepository is an autogenerated mock type for the AuditRepository type
type MockAuditRepository struct {
	mock.Mock
}

type MockAuditRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuditRepository) EXPECT() *MockAuditRepository_Expecter {
	return &MockAuditRepository_Expecter{mock: &_m.Mock}
}

// FindBySessionID provides a mock function with given fields: ctx, sessionID, limit, offset
func (_m *MockAuditRepository) FindBySessionID(ctx context.Context, sessionID string, limit int, offset int) ([]domain.AuditEntry, int, error) {
	ret := _m.Called(ctx, sessionID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindBySessionID")
	}

	var r0 []domain.AuditEntry
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]domain.AuditEntry, int, error)); ok {
		return rf(ctx, sessionID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []domain.AuditEntry); ok {
		r0 = rf(ctx, sessionID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AuditEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, sessionID, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, sessionID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuditRepository_FindBySessionID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindBySessionID'
type MockAuditRepository_FindBySessionID_Call struct {
	*mock.Call
}

// FindBySessionID is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
//   - limit int
//   - offset int
func (_e *MockAuditRepository_Expecter) FindBySessionID(ctx interface{}, sessionID interface{}, limit interface{}, offset interface{}) *MockAuditRepository_FindBySessionID_Call {
	return &MockAuditRepository_FindBySessionID_Call{Call: _e.mock.On("FindBySessionID", ctx, sessionID, limit, offset)}
}

func (_c *MockAuditRepository_FindBySessionID_Call) Run(run func(ctx context.Context, sessionID string, limit int, offset int)) *MockAuditRepository_FindBySessionID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockAuditRepository_FindBySessionID_Call) Return(_a0 []domain.AuditEntry, _a1 int, _a2 error) *MockAuditRepository_FindBySessionID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAuditRepository_FindBySessionID_Call) RunAndReturn(run func(context.Context, string, int, int) ([]domain.AuditEntry, int, error)) *MockAuditRepository_FindBySessionID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSession provides a mock function with given fields: ctx, sessionID
func (_m *MockAuditRepository) GetSession(ctx context.Context, sessionID string) (*repository.Session, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *repository.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*repository.Session, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *repository.Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuditRepository_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type MockAuditRepository_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockAuditRepository_Expecter) GetSession(ctx interface{}, sessionID interface{}) *MockAuditRepository_GetSession_Call {
	return &MockAuditRepository_GetSession_Call{Call: _e.mock.On("GetSession", ctx, sessionID)}
}

func (_c *MockAuditRepository_GetSession_Call) Run(run func(ctx context.Context, sessionID string)) *MockAuditRepository_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuditRepository_GetSession_Call) Return(_a0 *repository.Session, _a1 error) *MockAuditRepository_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuditRepository_GetSession_Call) RunAndReturn(run func(context.Context, string) (*repository.Session, error)) *MockAuditRepository_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateShareToken provides a mock function with given fields: ctx, token, sessionID
func (_m *MockAuditRepository) ValidateShareToken(ctx context.Context, token string, sessionID string) (bool, error) {
	ret := _m.Called(ctx, token, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateShareToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, token, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, token, sessionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuditRepository_ValidateShareToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateShareToken'
type MockAuditRepository_ValidateShareToken_Call struct {
	*mock.Call
}

// ValidateShareToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - sessionID string
func (_e *MockAuditRepository_Expecter) ValidateShareToken(ctx interface{}, token interface{}, sessionID interface{}) *MockAuditRepository_ValidateShareToken_Call {
	return &MockAuditRepository_ValidateShareToken_Call{Call: _e.mock.On("ValidateShareToken", ctx, token, sessionID)}
}

func (_c *MockAuditRepository_ValidateShareToken_Call) Run(run func(ctx context.Context, token string, sessionID string)) *MockAuditRepository_ValidateShareToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAuditRepository_ValidateShareToken_Call) Return(_a0 bool, _a1 error) *MockAuditRepository_ValidateShareToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuditRepository_ValidateShareToken_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockAuditRepository_ValidateShareToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuditRepository creates a new instance of MockAuditRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuditRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuditRepository {
	mock := &MockAuditRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
